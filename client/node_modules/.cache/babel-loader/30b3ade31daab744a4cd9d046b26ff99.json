{"ast":null,"code":"import { fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\nimport { setToken } from \"./authSlice\";\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"https://graph.microsoft.com/v1.0/users\",\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const {\n      auth\n    } = getState().auth;\n\n    if (token) {\n      headers.set('authorization', `${auth.method}`);\n    }\n  }\n});\nconst authQuery = fetchBaseQuery({\n  baseUrl: \"http://localhost:5001/\"\n});\n\nconst baseQueryWithReauth = async (args, api, extra) => {\n  const result = await baseQuery(args, api, extra);\n\n  if (result.error) {\n    const {\n      status,\n      code\n    } = result.error;\n\n    if (status == \"401\" || code === \"InvalidAuthenticationToken\") {\n      const {\n        data\n      } = await authQuery();\n\n      if (data) {\n        api.dispatch(setToken(data));\n        return baseQuery(args, api, extra);\n      }\n    }\n  }\n};\n\nexport default baseQueryWithReauth;","map":{"version":3,"names":["fetchBaseQuery","setToken","baseQuery","baseUrl","prepareHeaders","headers","getState","auth","token","set","method","authQuery","baseQueryWithReauth","args","api","extra","result","error","status","code","data","dispatch"],"sources":["/Users/shahartamari/code/ad-org-tree/client/src/services/fetchWithReauth.js"],"sourcesContent":["import { fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\nimport { setToken } from \"./authSlice\";\n\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"https://graph.microsoft.com/v1.0/users\",\n  prepareHeaders: (headers, {getState}) => {\n    const {auth} = getState().auth;\n    if (token) {\n        headers.set('authorization', `${auth.method}`)\n    }\n\n  }\n});\n\nconst authQuery = fetchBaseQuery({baseUrl: \"http://localhost:5001/\"});\n\nconst baseQueryWithReauth = async (args, api, extra) => {\n  const result = await baseQuery(args, api, extra);\n  if (result.error) {\n    const { status, code } = result.error;\n    if (status == \"401\" || code === \"InvalidAuthenticationToken\") {\n          const {data} =  await authQuery();\n          if (data) {\n            api.dispatch(setToken(data));\n            return baseQuery(args, api, extra);\n          }\n    }\n  }\n};\n\nexport default baseQueryWithReauth;\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,6BAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,SAAS,GAAGF,cAAc,CAAC;EAC/BG,OAAO,EAAE,wCADsB;EAE/BC,cAAc,EAAE,CAACC,OAAD,WAAyB;IAAA,IAAf;MAACC;IAAD,CAAe;IACvC,MAAM;MAACC;IAAD,IAASD,QAAQ,GAAGC,IAA1B;;IACA,IAAIC,KAAJ,EAAW;MACPH,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,GAAEF,IAAI,CAACG,MAAO,EAA5C;IACH;EAEF;AAR8B,CAAD,CAAhC;AAWA,MAAMC,SAAS,GAAGX,cAAc,CAAC;EAACG,OAAO,EAAE;AAAV,CAAD,CAAhC;;AAEA,MAAMS,mBAAmB,GAAG,OAAOC,IAAP,EAAaC,GAAb,EAAkBC,KAAlB,KAA4B;EACtD,MAAMC,MAAM,GAAG,MAAMd,SAAS,CAACW,IAAD,EAAOC,GAAP,EAAYC,KAAZ,CAA9B;;EACA,IAAIC,MAAM,CAACC,KAAX,EAAkB;IAChB,MAAM;MAAEC,MAAF;MAAUC;IAAV,IAAmBH,MAAM,CAACC,KAAhC;;IACA,IAAIC,MAAM,IAAI,KAAV,IAAmBC,IAAI,KAAK,4BAAhC,EAA8D;MACxD,MAAM;QAACC;MAAD,IAAU,MAAMT,SAAS,EAA/B;;MACA,IAAIS,IAAJ,EAAU;QACRN,GAAG,CAACO,QAAJ,CAAapB,QAAQ,CAACmB,IAAD,CAArB;QACA,OAAOlB,SAAS,CAACW,IAAD,EAAOC,GAAP,EAAYC,KAAZ,CAAhB;MACD;IACN;EACF;AACF,CAZD;;AAcA,eAAeH,mBAAf"},"metadata":{},"sourceType":"module"}
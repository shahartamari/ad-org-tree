{"ast":null,"code":"import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport baseQueryWithReauth from \"./fetchWithReauth\";\nconst GRAPH_TYPE = \"GRAPH\";\nconst PHOTO_TYPE = \"PHOTO\";\nconst url = window.URL || window.webkitURL;\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: baseQueryWithReauth,\n  tagTypes: [GRAPH_TYPE],\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"users\",\n      transformResponse: response => response.value\n    }),\n    getUser: builder.query({\n      query: id => `users/${id}$select=displayName,jobTitle,department,userPrinicpalName,mail$expand=manager($levels=max;$select==displayName,jobTitle,department,userPrinicpalName,mail)`,\n      transformResponse: response => response.value,\n      headers: {\n        consistencyLevel: \"eventual\"\n      },\n      providesTags: (result, error, id) => [{\n        type: GRAPH_TYPE,\n        id\n      }]\n    }),\n    getProfilePhoto: builder.query({\n      /*      query: (id) => `users/${id}/photos/48x48/$value`,\n      headers: { responseType: \"blob\" },\n      providesTags: (result, error, id) => [{ type: PHOTO_TYPE, id }],\n      transformResponse: (response) => {\n        const url = window.URL || window.webkitURL;\n        const img = url.createObjectURL(response);\n        console.log(img);\n        return img;\n            },\n      */\n      headers: {\n        responseType: \"blob\"\n      },\n      queryFn: async (arg, api, extraOptions, baseQueryWithReauth) => {\n        const result = await baseQueryWithReauth(`users/${arg}/photos/48x48/$value`, api, extraOptions);\n\n        try {\n          const img = url.createObjectURL(result);\n        } catch {\n          console.error(\"image not found\");\n        }\n      }\n    })\n  })\n});\nexport default graphApi;\nexport const {\n  useGetUserQuery,\n  useGetUsersQuery,\n  useGetProfilePhotoQuery\n} = graphApi;","map":{"version":3,"names":["createApi","baseQueryWithReauth","GRAPH_TYPE","PHOTO_TYPE","url","window","URL","webkitURL","graphApi","reducerPath","baseQuery","tagTypes","endpoints","builder","getUsers","query","transformResponse","response","value","getUser","id","headers","consistencyLevel","providesTags","result","error","type","getProfilePhoto","responseType","queryFn","arg","api","extraOptions","img","createObjectURL","console","useGetUserQuery","useGetUsersQuery","useGetProfilePhotoQuery"],"sources":["/Users/shahartamari/code/ad-org-tree/client/src/services/graphApi.js"],"sourcesContent":["import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport baseQueryWithReauth from \"./fetchWithReauth\";\n\nconst GRAPH_TYPE = \"GRAPH\";\nconst PHOTO_TYPE = \"PHOTO\";\nconst url = window.URL || window.webkitURL;\n\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: baseQueryWithReauth,\n  tagTypes: [GRAPH_TYPE],\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => \"users\",\n      transformResponse: (response) => response.value,\n    }),\n    getUser: builder.query({\n      query: (id) =>\n        `users/${id}$select=displayName,jobTitle,department,userPrinicpalName,mail$expand=manager($levels=max;$select==displayName,jobTitle,department,userPrinicpalName,mail)`,\n      transformResponse: (response) => response.value,\n      headers: { consistencyLevel: \"eventual\" },\n      providesTags: (result, error, id) => [{ type: GRAPH_TYPE, id }],\n    }),\n    getProfilePhoto: builder.query({\n      /*      query: (id) => `users/${id}/photos/48x48/$value`,\n      headers: { responseType: \"blob\" },\n      providesTags: (result, error, id) => [{ type: PHOTO_TYPE, id }],\n      transformResponse: (response) => {\n        const url = window.URL || window.webkitURL;\n        const img = url.createObjectURL(response);\n        console.log(img);\n        return img;\n            },\n  */ headers: { responseType: \"blob\" },\n      queryFn: async (arg, api, extraOptions, baseQueryWithReauth) => {\n          const result = await baseQueryWithReauth(\n            `users/${arg}/photos/48x48/$value`,\n            api,\n            extraOptions\n          );\n          try {\n          const img = url.createObjectURL(result);\n          } catch {\n            console.error(\"image not found\");\n          }\n      },\n    }),\n  }),\n});\n\nexport default graphApi;\nexport const { useGetUserQuery, useGetUsersQuery, useGetProfilePhotoQuery } =\n  graphApi;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;AAEA,MAAMC,UAAU,GAAG,OAAnB;AACA,MAAMC,UAAU,GAAG,OAAnB;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,SAAjC;AAEA,MAAMC,QAAQ,GAAGR,SAAS,CAAC;EACzBS,WAAW,EAAE,SADY;EAEzBC,SAAS,EAAET,mBAFc;EAGzBU,QAAQ,EAAE,CAACT,UAAD,CAHe;EAIzBU,SAAS,EAAGC,OAAD,KAAc;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;MACtBA,KAAK,EAAE,MAAM,OADS;MAEtBC,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAACC;IAFpB,CAAd,CADa;IAKvBC,OAAO,EAAEN,OAAO,CAACE,KAAR,CAAc;MACrBA,KAAK,EAAGK,EAAD,IACJ,SAAQA,EAAG,4JAFO;MAGrBJ,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAACC,KAHrB;MAIrBG,OAAO,EAAE;QAAEC,gBAAgB,EAAE;MAApB,CAJY;MAKrBC,YAAY,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBL,EAAhB,KAAuB,CAAC;QAAEM,IAAI,EAAExB,UAAR;QAAoBkB;MAApB,CAAD;IALhB,CAAd,CALc;IAYvBO,eAAe,EAAEd,OAAO,CAACE,KAAR,CAAc;MAC7B;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAAKM,OAAO,EAAE;QAAEO,YAAY,EAAE;MAAhB,CAVqB;MAW7BC,OAAO,EAAE,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,YAAjB,EAA+B/B,mBAA/B,KAAuD;QAC5D,MAAMuB,MAAM,GAAG,MAAMvB,mBAAmB,CACrC,SAAQ6B,GAAI,sBADyB,EAEtCC,GAFsC,EAGtCC,YAHsC,CAAxC;;QAKA,IAAI;UACJ,MAAMC,GAAG,GAAG7B,GAAG,CAAC8B,eAAJ,CAAoBV,MAApB,CAAZ;QACC,CAFD,CAEE,MAAM;UACNW,OAAO,CAACV,KAAR,CAAc,iBAAd;QACD;MACJ;IAtB4B,CAAd;EAZM,CAAd;AAJc,CAAD,CAA1B;AA2CA,eAAejB,QAAf;AACA,OAAO,MAAM;EAAE4B,eAAF;EAAmBC,gBAAnB;EAAqCC;AAArC,IACX9B,QADK"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nconst GRAPH_TYPE = \"GRAPH\";\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: (headers, _ref) => {\n      let {\n        getState\n      } = _ref;\n      console.log(getState().auth.endpoints.getToken.select('TOKEN'));\n      const token = null; //getToken();\n      //console.log(token);\n\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    }\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"users\"\n    }),\n    getUser: builder.query({\n      query: id => `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{\n        type: GRAPH_TYPE,\n        id\n      }]\n    })\n  })\n});\nexport default graphApi;\nexport const {\n  useGetUserQuery,\n  useGetUsersQuery\n} = graphApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","GRAPH_TYPE","graphApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","console","log","auth","endpoints","getToken","select","token","set","tagTypes","builder","getUsers","query","getUser","id","providesTags","result","errir","type","useGetUserQuery","useGetUsersQuery"],"sources":["/Users/shahartamari/code/ad-org-tree/client/src/services/graphApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst GRAPH_TYPE = \"GRAPH\";\n\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: (headers, { getState }) => {\n      \n      console.log(getState().auth.endpoints.getToken.select('TOKEN'));\n      const token = null; //getToken();\n      //console.log(token);\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    },\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => \"users\",\n    }),\n    getUser: builder.query({\n      query: (id) =>\n        `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{ type: GRAPH_TYPE, id }],\n    }),\n  }),\n});\n\nexport default graphApi;\nexport const { useGetUserQuery, useGetUsersQuery } = graphApi;\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,MAAMC,UAAU,GAAG,OAAnB;AAEA,MAAMC,QAAQ,GAAGH,SAAS,CAAC;EACzBI,WAAW,EAAE,SADY;EAEzBC,SAAS,EAAEJ,cAAc,CAAC;IACxBK,OAAO,EAAE,mCADe;IAExBC,cAAc,EAAE,CAACC,OAAD,WAA2B;MAAA,IAAjB;QAAEC;MAAF,CAAiB;MAEzCC,OAAO,CAACC,GAAR,CAAYF,QAAQ,GAAGG,IAAX,CAAgBC,SAAhB,CAA0BC,QAA1B,CAAmCC,MAAnC,CAA0C,OAA1C,CAAZ;MACA,MAAMC,KAAK,GAAG,IAAd,CAHyC,CAGrB;MACpB;;MACA,IAAIA,KAAJ,EAAW;QACTR,OAAO,CAACS,GAAR,CAAY,eAAZ,EAA8B,UAASD,KAAM,EAA7C;MACD;;MAED,OAAOR,OAAP;IACD;EAZuB,CAAD,CAFA;EAgBzBU,QAAQ,EAAE,CAAChB,UAAD,CAhBe;EAiBzBW,SAAS,EAAGM,OAAD,KAAc;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;MACtBA,KAAK,EAAE,MAAM;IADS,CAAd,CADa;IAIvBC,OAAO,EAAEH,OAAO,CAACE,KAAR,CAAc;MACrBA,KAAK,EAAGE,EAAD,IACJ,SAAQA,EAAG,2DAFO;MAGrBC,YAAY,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBH,EAAhB,KAAuB,CAAC;QAAEI,IAAI,EAAEzB,UAAR;QAAoBqB;MAApB,CAAD;IAHhB,CAAd;EAJc,CAAd;AAjBc,CAAD,CAA1B;AA6BA,eAAepB,QAAf;AACA,OAAO,MAAM;EAAEyB,eAAF;EAAmBC;AAAnB,IAAwC1B,QAA9C"},"metadata":{},"sourceType":"module"}
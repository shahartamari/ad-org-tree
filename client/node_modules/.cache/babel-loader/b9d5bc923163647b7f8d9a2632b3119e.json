{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport authApi from \"./authApi\";\nconst GRAPH_TYPE = \"GRAPH\";\nconst {\n  getToken\n} = authApi.endpoints;\nconsole.log(getToken());\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: (headers, _ref) => {\n      let {\n        getState\n      } = _ref;\n      const token = null; //getToken();\n\n      console.log(token);\n\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    }\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"users\"\n    }),\n    getUser: builder.query({\n      query: id => `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{\n        type: GRAPH_TYPE,\n        id\n      }]\n    })\n  })\n});\nexport default graphApi;\nexport const {\n  useGetUserQuery,\n  useGetUsersQuery\n} = graphApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","authApi","GRAPH_TYPE","getToken","endpoints","console","log","graphApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","token","set","tagTypes","builder","getUsers","query","getUser","id","providesTags","result","errir","type","useGetUserQuery","useGetUsersQuery"],"sources":["/Users/shahartamari/code/ad-org-tree/client/src/services/graphApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport authApi from \"./authApi\";\n\nconst GRAPH_TYPE = \"GRAPH\";\nconst {getToken} = authApi.endpoints;\nconsole.log(getToken())\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: (headers, { getState }) => {\n   \n      const token = null; //getToken();\n      console.log(token);\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    },\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => \"users\",\n    }),\n    getUser: builder.query({\n      query: (id) =>\n        `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{ type: GRAPH_TYPE, id }],\n    }),\n  }),\n});\n\nexport default graphApi;\nexport const { useGetUserQuery, useGetUsersQuery } = graphApi;\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,UAAU,GAAG,OAAnB;AACA,MAAM;EAACC;AAAD,IAAaF,OAAO,CAACG,SAA3B;AACAC,OAAO,CAACC,GAAR,CAAYH,QAAQ,EAApB;AACA,MAAMI,QAAQ,GAAGR,SAAS,CAAC;EACzBS,WAAW,EAAE,SADY;EAEzBC,SAAS,EAAET,cAAc,CAAC;IACxBU,OAAO,EAAE,mCADe;IAExBC,cAAc,EAAE,CAACC,OAAD,WAA2B;MAAA,IAAjB;QAAEC;MAAF,CAAiB;MAEzC,MAAMC,KAAK,GAAG,IAAd,CAFyC,CAErB;;MACpBT,OAAO,CAACC,GAAR,CAAYQ,KAAZ;;MACA,IAAIA,KAAJ,EAAW;QACTF,OAAO,CAACG,GAAR,CAAY,eAAZ,EAA8B,UAASD,KAAM,EAA7C;MACD;;MAED,OAAOF,OAAP;IACD;EAXuB,CAAD,CAFA;EAezBI,QAAQ,EAAE,CAACd,UAAD,CAfe;EAgBzBE,SAAS,EAAGa,OAAD,KAAc;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;MACtBA,KAAK,EAAE,MAAM;IADS,CAAd,CADa;IAIvBC,OAAO,EAAEH,OAAO,CAACE,KAAR,CAAc;MACrBA,KAAK,EAAGE,EAAD,IACJ,SAAQA,EAAG,2DAFO;MAGrBC,YAAY,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBH,EAAhB,KAAuB,CAAC;QAAEI,IAAI,EAAEvB,UAAR;QAAoBmB;MAApB,CAAD;IAHhB,CAAd;EAJc,CAAd;AAhBc,CAAD,CAA1B;AA4BA,eAAed,QAAf;AACA,OAAO,MAAM;EAAEmB,eAAF;EAAmBC;AAAnB,IAAwCpB,QAA9C"},"metadata":{},"sourceType":"module"}
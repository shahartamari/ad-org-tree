{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { useContext } from \"react\";\nimport { selectToken } from \"./authApi\";\nconst GRAPH_TYPE = \"GRAPH\";\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: _s(headers => {\n      _s();\n\n      const {\n        token\n      } = useContext();\n      console.log(token); //console.log(token);\n\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    }, \"kWqFZmLYJ69534nzXqEBMiQnY1g=\")\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"users\"\n    }),\n    getUser: builder.query({\n      query: id => `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{\n        type: GRAPH_TYPE,\n        id\n      }]\n    })\n  })\n});\nexport default graphApi;\nexport const {\n  useGetUserQuery,\n  useGetUsersQuery\n} = graphApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","useContext","selectToken","GRAPH_TYPE","graphApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","console","log","set","tagTypes","endpoints","builder","getUsers","query","getUser","id","providesTags","result","errir","type","useGetUserQuery","useGetUsersQuery"],"sources":["/Users/shahartamari/code/ad-org-tree/client/src/services/graphApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { useContext } from \"react\";\nimport { selectToken } from \"./authApi\";\n\nconst GRAPH_TYPE = \"GRAPH\";\n\nconst graphApi = createApi({\n  reducerPath: \"MgGraph\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://graph.microsoft.com/beta/\",\n    prepareHeaders: (headers) => {\n     \n      const {token} = useContext()\n      console.log(token);\n      \n      //console.log(token);\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    },\n  }),\n  tagTypes: [GRAPH_TYPE],\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => \"users\",\n    }),\n    getUser: builder.query({\n      query: (id) =>\n        `users/${id}$select=displayName,jobTitle,department,userPrinicpalName`,\n      providesTags: (result, errir, id) => [{ type: GRAPH_TYPE, id }],\n    }),\n  }),\n});\n\nexport default graphApi;\nexport const { useGetUserQuery, useGetUsersQuery } = graphApi;\n\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,MAAMC,UAAU,GAAG,OAAnB;AAEA,MAAMC,QAAQ,GAAGL,SAAS,CAAC;EACzBM,WAAW,EAAE,SADY;EAEzBC,SAAS,EAAEN,cAAc,CAAC;IACxBO,OAAO,EAAE,mCADe;IAExBC,cAAc,KAAGC,OAAD,IAAa;MAAA;;MAE3B,MAAM;QAACC;MAAD,IAAUT,UAAU,EAA1B;MACAU,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAH2B,CAK3B;;MACA,IAAIA,KAAJ,EAAW;QACTD,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,UAASH,KAAM,EAA7C;MACD;;MAED,OAAOD,OAAP;IACD,CAXa;EAFU,CAAD,CAFA;EAiBzBK,QAAQ,EAAE,CAACX,UAAD,CAjBe;EAkBzBY,SAAS,EAAGC,OAAD,KAAc;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;MACtBA,KAAK,EAAE,MAAM;IADS,CAAd,CADa;IAIvBC,OAAO,EAAEH,OAAO,CAACE,KAAR,CAAc;MACrBA,KAAK,EAAGE,EAAD,IACJ,SAAQA,EAAG,2DAFO;MAGrBC,YAAY,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBH,EAAhB,KAAuB,CAAC;QAAEI,IAAI,EAAErB,UAAR;QAAoBiB;MAApB,CAAD;IAHhB,CAAd;EAJc,CAAd;AAlBc,CAAD,CAA1B;AA8BA,eAAehB,QAAf;AACA,OAAO,MAAM;EAAEqB,eAAF;EAAmBC;AAAnB,IAAwCtB,QAA9C"},"metadata":{},"sourceType":"module"}